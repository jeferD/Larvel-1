--las rutas en laravel estan en ROUTES

--Solucion error 500 y llave, error al ejecutar aritisan
https://es.stackoverflow.com/questions/283568/error-500-internal-server-error-laravel


--asi se declaran rutas, laravel imprime en cascada, primero lo primero

Route::get('/', function () {
    // return view('welcome');
    return "Bienvenido";
});

Route::get('cursos', function () {
    return "Bienvenido a cursos";
});

Route::get('cursos/{curso}', function ($curso) {
    return "Bienvenido a cursos $curso";
});

--Crear un controlador, se encarga lo que se debe mostrar al usuario
--los controladores estan ubicados en app/http/controllers
un controlador se crea asi desde linea de comandos:
php artisan make:controller HomeController

Asignar un controlador a una rutas, esto se hace en web.php

Route::get('/', HomeController::class);
use App\Http\Controllers\HomeController;


y en el controlador va esto 
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class HomeController extends Controller
{
    public function __invoke(){
        return "Bienvenido desde el controlador home";
    }
}

--Cuando es una sola ruta se utiliza el metodo __invoke
public function __invoke(){
    return "Bienvenido desde el controlador home";
}
--cuando es para varias rutas la sintaxis es asi 
en curso controller 
class CursoController extends Controller
{
    public function index(){
        return "Bienvenido a cursos";
    }

    public function create(){
        return "Bienvenido a crear cursos";
    }

    public function show($curso){
        return "Bienvenido a cursos $curso ";
    }
}

en web php
Route::get('cursos', [CursoController::class, 'index']);
Route::get('cursos/create', [CursoController::class, 'create']);
Route::get('cursos/{curso}', [CursoController::class, 'show']);


//grupo de rutas

Route::controller(CursoController::class)->group(function(){
    Route::get('cursos', 'index');
    Route::get('cursos/create', 'create');
    Route::get('cursos/{curso}', 'show');
});

--vistas en los controladores
las vistas se almacenan en resorces/views



para crear una plantilla y que se refleje en todas las hojas de html se pone
en el nombre del documento .blade.php 

la plantilla va en layouts y se define <aside><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@yield('title')</title>
    <!-- css -->
</head>
<body>
    @yield('content')
</body>
</html></aside>

ahora si en cara hoja de php lo que ponemos es la referencia de nuestra plantilla
@extends('layouts.plantilla') -> referencia plantilla

@section('title', 'Home') -> nombre de nuiestra pesta√±a

@section('content')
    <h1>Bienvenido desde a index</h1>
@endsection


--Para conectarme a una base de datos se hace en config-database.php

para colocar credenciales de la bd se las coloca en database.php pero por seguridad estos datos son asignados en el archivo 
.env
DB_CONNECTION es igual al valor de quede tener en el archivo .env, si esta variable no existe por defecto se pone mysql
env('DB_CONNECTION', 'mysql')


DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=blog
DB_USERNAME=root
DB_PASSWORD=12345

--en laravel existe migraciones, que sirve para el versionamiento de la base de datos
cada cambio que se hace en base de datos queda registrado en database/migrations

public function up(): void//crea tabla
{
    // users: nombre de la tabla
    // Blueprint: crea las columnas de la tabla
    Schema::create('users', function (Blueprint $table) {
        $table->id();//integuer unsigned incremend
        $table->string('name', 150);//varchar 150 caracteres
        $table->string('email')->unique();//dato unico
        $table->timestamp('email_verified_at')->nullable();//guardar fechas, al realizar el registro se anula
        $table->string('password');
        $table->rememberToken();//genera un token de hasta si 100 caracteres
        $table->timestamps();//almacena fecha y hora que se registra
    });
}

/**
 * Reverse the migrations.
 */
public function down(): void//revierte los cambios, rollback
{
    Schema::dropIfExists('users');
}



--PARA CREAR UNA MIGRACION SE EJECUTA EL comandos
php artisan migrate  
el comando ejecuta el archivo migrations y ejecuyta uno a uno los archivos alojados ahi, solo la funcion up
ademas se crea una tabla que lleva el registro de las migraciones que se ha realizado

